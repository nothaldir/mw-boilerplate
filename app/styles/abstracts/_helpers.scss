/* --------------------------
RESPONSIVE MEDIA QUERY MIXINS
-------------------------- */

// Repond above
@mixin respond-above($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    @media (min-width: $breakpoint-value) {
      @content;
    }
  }

  @else {
    @warn "Invalid breakpoint: #{$breakpoint}.";
  }
}

// Repond below
@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  }

  @else {
    @warn "Invalid breakpoint: #{$breakpoint}.";
  }
}

// Respond between
@mixin respond-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  }

  @else {
    @if (map-has-key($breakpoints, $lower)==false) {
      @warn "Your lower breakpoint was invalid: #{$lower}.";
    }

    @if (map-has-key($breakpoints, $upper)==false) {
      @warn "Your upper breakpoint was invalid: #{$upper}.";
    }
  }
}

/* --------
SHOW / HIDE
-------- */

.u-desktopOnly {
  @include respond-below(md) {
    display: none;
  }
}

.u-mobileOnly {
  @include respond-above(xs) {
    display: none;
  }
}

.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}
